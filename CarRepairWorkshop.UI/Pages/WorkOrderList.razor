@page "/orders"
@inject IWorkOrderService WorkOrderService
@inject ICustomerService CustomerService

<PageTitle>Work Order list</PageTitle>
<h1>Work Orders:</h1>
@if (WorkOrders is not null)
{
    <div class="container">
        <div class="row">
            <div class="col-12">
                <table class="table table-hover table-bordered table-dark">
                    <thead>
                        <tr>
                            <th scope="col">Customer</th>
                            <th scope="col">License Number</th>
                            <th scope="col">Category</th>
                            <th scope="col">Damage</th>
                            <th scope="col">Status</th>
                            <th>Commands</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in WorkOrders)
                        {
                            <tr>
                                <td>@GetCustomerName(order.CustomerId)</td>
                                <td>@order.LicensePlate</td>
                                <td>@order.RepairCategory</td>
                                <td>@order.DamageSeverity</td>
                                <td>@order.Status</td>
                                <td width="20%">
                                    <div class="btn-group w-100" role="group">
                                        <a class="btn btn-outline-info m-1" href="order/@order.Id.ToString()">Details</a>
                                        <button class="btn btn-outline-danger m-1" @onclick="() => RemoveWorkOrder(order.Id)">Delete</button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <svg class="loading-progress">
        <circle r="40%" cx="50%" cy="50%" />
        <circle r="40%" cx="50%" cy="50%" />
    </svg>
}

@code {
    public IEnumerable<WorkOrder>? WorkOrders { get; set; }
    private Dictionary<Guid, string> customerNames = new Dictionary<Guid, string>();

    protected override async Task OnInitializedAsync()
    {
        WorkOrders = await WorkOrderService.GetWorkOrdersAsync();
        if (WorkOrders.Any())
        {
        var customerIds = WorkOrders?.Select(order => order.CustomerId).Distinct() ?? Enumerable.Empty<Guid>();
        var customers = await Task.WhenAll(customerIds.Select(id => CustomerService.GetCustomerByIdAsync(id)));

        // Populate the customerNames dictionary
        customerNames = customers.ToDictionary(customer => customer?.Id ?? Guid.Empty, customer => customer?.Name ?? "N/A");
        }
    }

    private async Task RemoveWorkOrder(Guid workOrderId)
    {
        await WorkOrderService.DeleteWorkOrderAsync(workOrderId);
        WorkOrders = await WorkOrderService.GetWorkOrdersAsync();
    }

    private string GetCustomerName(Guid customerId)
    {
        return customerNames.TryGetValue(customerId, out var name) ? name : "N/A";
    }
}
