@page "/add-workorder"
@inject IWorkOrderService WorkOrderService
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager

<h3 class="text-light mb-4">Add Work Order</h3>

<EditForm Model="@workOrder" OnValidSubmit="@AddNewWorkOrder">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="customerId" class="text-light">Customer:</label>
        <select id="customerId" class="form-control" @bind="workOrder.CustomerId">
            @foreach (var customer in customers)
            {
                <option value="@customer.Id">@customer.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="licensePlate" class="text-light">License Plate:</label>
        <input id="licensePlate" class="form-control" type="text" @bind="workOrder.LicensePlate" />
        <ValidationMessage For="@(() => workOrder.LicensePlate)" />
    </div>

    <div class="form-group">
        <label for="dateOfProduction" class="text-light">Date of Production:</label>
        <input id="dateOfProduction" class="form-control" type="date" @bind="workOrder.DateOfProduction" />
        <ValidationMessage For="@(() => workOrder.DateOfProduction)" />
    </div>

    <div class="form-group">
        <label for="repairCategory" class="text-light">Repair Category:</label>
        <select id="repairCategory" class="form-control" @bind="workOrder.RepairCategory">
            <option value=@RepairCategory.Motor disabled selected>Select your Category</option>
            @foreach (var category in Enum.GetValues(typeof(RepairCategory)).Cast<RepairCategory>())
            {
                <option value="@category">@category</option>
            }
        </select>
        <ValidationMessage For="@(() => workOrder.RepairCategory)" />
    </div>


    <div class="form-group">
        <label for="description" class="text-light">Description:</label>
        <textarea id="description" class="form-control" @bind="workOrder.Description"></textarea>
        <ValidationMessage For="@(() => workOrder.Description)" />
    </div>

    <div class="form-group">
        <label for="damageSeverity" class="text-light">Damage Severity:</label>
        <input id="damageSeverity" class="form-control" type="number" @bind="workOrder.DamageSeverity" />
        <ValidationMessage For="@(() => workOrder.DamageSeverity)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Add Work Order</button>
    </div>
</EditForm>

@code {
    private WorkOrder workOrder = new WorkOrder();
    private IEnumerable<Customer> customers = new List<Customer>();

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetCustomersAsync();
    }

    private async Task AddNewWorkOrder()
    {
        await WorkOrderService.AddWorkOrderAsync(workOrder);
        NavigationManager.NavigateTo("/orders");
    }
}

<style>
    body {
        background-color: #121212;
        color: #ffffff;
    }

    h3 {
        color: #3498db;
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        color: #ecf0f1;
    }

    select,
    input,
    textarea {
        width: 100%;
        padding: 8px;
        margin-top: 5px;
        margin-bottom: 15px;
        box-sizing: border-box;
        border: 1px solid #3498db;
        border-radius: 4px;
        background-color: #2c3e50;
        color: #ecf0f1;
    }

    button {
        padding: 10px;
        background-color: #3498db;
        color: #ecf0f1;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    button:hover {
        background-color: #2980b9;
    }
</style>
